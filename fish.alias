<drac2>
char = character()
al = ctx.alias
pref = ctx.prefix
c = combat()
current_time = time()

using(
    Roll='4dd0faad-8520-41a9-a0e2-ed922557578d',
    weather="74a21a79-bc4c-4b03-9b21-a16e2b591a89",
)

inp1 = "&1&"

arg_list = &ARGS&

diff = time() - float(get('last_fish', 0))

server_cd = get_svar('fishCooldown', '35')
if not server_cd.isnumeric():
    server_cd = 35
cooldown = int(server_cd)

weather_img = ''
footer = f"{pref}help {al} | {pref}{al} setup for Customization Options | made by @alpha983"


def has_starry_form_dragon():
    return any("Starry Form: Dragon" in action.name for action in char.actions)


def ieffect_active_starry_form_dragon():
    c = combat()
    if c and (target := c.get_combatant(name)):
        return ((eff := target.get_effect("Starry Form")) and eff.desc.startswith("Constellation: Dragon"))
    return False


def manage_starry_form_dragon(force_activate=False):
    # Round count * 6 seconds - 100 rounds = 10 mins
    duration = ((c and (target := c.get_combatant(name)) and 
            (eff := target.get_effect("Starry Form")) and 
            eff.desc.startswith("Constellation: Dragon") and 
            eff.duration) or 100) * 6
    end_time = char.get_cvar('starry_form_end')
    current_time = time()

    if ieffect_active_starry_form_dragon():
        end_time = str(current_time + duration)
        char.set_cvar('starry_form_end', end_time)

    # Check if Starry Form is already active
    if end_time:
        try:
            end_time_float = float(end_time)
            if end_time_float > current_time:
                remaining_time = end_time_float - current_time
                return remaining_time, False  # Already active, no new activation
        except:
            pass  # Invalid end_time, treat as not active

    # If we reach here, Starry Form is not active or has expired
    if force_activate:
        wild_shape = char.get_cc("Wild Shape")
        if wild_shape > 0 and not ieffect_active_starry_form_dragon():
            char.mod_cc("Wild Shape", -1)
            new_end_time = str(current_time + duration)
            char.set_cvar('starry_form_end', new_end_time)
            return duration, True  # New activation
    
    return None, False  # No activation needed or possible


def notify_no_starry_dragon_char():
    title = f'{name} does not possess the Starry Form: Dragon ability.'
    desc = f'Please double check your active character.'
    return f'embed -title "{title}" -desc "{desc}" -thumb {image} -footer "{footer}" -color red'


if 'setup' in inp1.casefold():
    title = 'Server Customization Options'
    image = ''
    desc = get_gvar('b38466dc-ff6e-4a81-8a17-f880d99e7dbe')
elif diff < cooldown:
    time_left = round(cooldown-diff)
    title = f'The fish have scattered away at your fishing attempts!'
    desc = f'Please wait for them to re-assemble!\nThe waters will calm down <t:{int(time()) + time_left}:R>\n\n_(You could RP your current catch until then)_'
else:
    auto_item = dragon_active = starry_desc = False
    if 'sea' in inp1.casefold():
        fish_table = load_json(get_gvar("ea4caa26-9c39-4925-b076-ab64d6cfa093"))
    else:
        fish_table = load_json(get_gvar("428660f4-cd5d-4a02-b7d2-3f0139550b2e"))
    dice = roll("d20")
    surv_dc = vroll("d18mi3")
    
    # Check if the input or the current state indicates Starry Form: Dragon
    starry_dragon = ieffect_active_starry_form_dragon() or 'dragon' in inp1.casefold()

    if starry_dragon:
        if not has_starry_form_dragon():
            return notify_no_starry_dragon_char()

    if has_starry_form_dragon():
        force_activate = 'dragon' in inp1.casefold()
        remaining_time, newly_activated = manage_starry_form_dragon(force_activate)
        if remaining_time is not None:
            arg_list.extend(['-mc', '10'])
            if newly_activated:
                wild_shape_cc = char.cc("Wild Shape")
                starry_desc = f"> **Starry Form: Dragon** activated!\n> Wild Shape:\n> {wild_shape_cc} (-1)\n> Time remaining: <t:{int(time()) + remaining_time}:R>\n\n"
            else:
                starry_desc = f"> **Starry Form: Dragon** is already active.\n> Time remaining: <t:{str(int(time() + remaining_time)).replace('in ','')}:R>\n\n"
        elif force_activate:
            starry_desc = f"""> You don't have any Wild Shape uses left to activate **Starry Form: Dragon**.
> 
> **Wild Shape**
> {char.cc('Wild Shape')}

    """
        else:
            starry_desc = ''
    else:
        starry_desc = ''

    weather_info, main_events, sub_events, weather_changed, sub_event_changed, main_dc_mod, sub_dc_mod, main_event_desc, sub_event_desc, current_weather, next_weather_update, next_event_update, weather_img = weather.update_weather()

    # Apply weather DC modifier to survival check
    final_surv_dc = surv_dc.total
    surv_mod = character().skills.survival.value
    equalizer = surv_mod - 2 if surv_mod > 5 else surv_mod
    base_dc = final_surv_dc + equalizer
    if typeof(weather_info) == 'str':
        weather_info = load_json(weather_info)
    final_surv_dc = base_dc + weather_info['total_dc_mod']

    char.set_cvar('last_fish', time())
    args = argparse(arg_list)
    surv_check = Roll.check("survival", args)
    surv_narr = f'\n{name} makes a **DC {final_surv_dc}** SURVIVAL check:'
    surv_roll = f'\n{surv_check.roll}'
    fish_found = randchoice(fish_table)
    title = f'{name} begins fishing! üê†'
    found = 'You found'
    trinket_loot = get_svar('fishTrinketLoot', 'default')


    # Build Weather Display
    weather_desc = f"""
**__Environmental Rolls__**:
*Weather*:
{weather.prettyCurrentSeason()}
**{current_weather}**: *{main_event_desc}* ({main_dc_mod:+d} to DC)
Weather change: <t:{next_weather_update}:R>

*Event*:
**{weather_info['current_sub_event']}**: *{sub_event_desc}* ({sub_dc_mod:+d} to DC)
Event change: <t:{next_event_update}:R>

**__DC Determination__**:
{base_dc} [Base DC] {main_dc_mod:+d} [Weather] {sub_dc_mod:+d} [Event] = DC`{final_surv_dc}`
    """

    weather_change_desc = ''
    if weather_changed:
        weather_change_desc += f"\n{weather_info['weather_change']}"
    if sub_event_changed:
        weather_change_desc += f"{weather_info['sub_event_change']}"


    if (dice < 4 or 'forceloot' in args) and trinket_loot not in 'disabled':
        if trinket_loot.lower() in 'default':
            d = roll('d2')
            if d == 1:
                t1 = load_json(get_gvar("0a3f1359-b3da-4049-9567-a4afc134a3da"))
                t2 = load_json(get_gvar("5ff4aa03-f55c-4465-b37d-da90ffd27e57"))
            else:
                t1 = load_json(get_gvar("189c9332-07a0-49d5-89bf-868d872e01fa"))
                t2 = load_json(get_gvar("54c640bf-30b0-43cc-a51b-66b28aae459a"))
            ta = t1+t2
            rl = randchoice(ta)
            rl = rl[0].lower() + rl[1:]
        else:
            if not '-' in trinket_loot:
                err(f':warning: __Requires Server Admin Attention:__\nInvalid `fishTrinketLoot` svar. Use `{pref}{al} setup` and please follow the instructions to configure it correctly.')
            elif '-' in trinket_loot:
                ta = load_json(get_gvar(trinket_loot))
                rl = randchoice(ta)
                rl = rl[0].lower() + rl[1:]
            else:
                err(f':warning: __Requires Server Admin Attention:__\nThe `fishTrinketLoot` svar  contains an invalid gvar address. Please rectify it or use `{pref}svar fishTrinketLoot default` to go back to the default trinket loot list or `{pref}svar fishTrinketLoot disabled` to disable the trinket loot option.')
        desc = f'{found} {rl}'
    elif dice < 17 or 'forceloot' not in args:
        if surv_check.roll.total >= final_surv_dc:
            fish_result = f'Yay! You caught the {fish_found}!'
            auto_item = fish_found
        else:
            fish_result = 'Unfortunately, the fish slips away!\n'
        desc = f'{found} a {fish_found}!\n{surv_narr} {surv_roll} \n\n**{fish_result}**'
    else:
        desc = f'The waters seem calm and serene as it flows past you!'
    if auto_item and exists('bags'):
        loot = auto_item
        bag_name = 'Fish'
        loot_added = False
        bag = load_json(get('bags'))
        for bag_cat in bag:
            if bag_name.lower() in bag_cat[0].lower():
                bag_name = bag_cat[0]
                bag_loot_count = bag_cat[1][loot] if loot in list(bag_cat[1].keys()) else 0
                bag_cat[1][loot] = bag_cat[1][loot] + 1 if bag_loot_count > 0 else 1
                loot_added = True
                break
        if not loot_added:
            bag.append([bag_name, {loot: 1}])
        desc = desc + f'\n\nüéí **`{loot}`** was automagically added to your `{pref}bag` *`{bag_name.capitalize()}`* pouch!\n'
        char.set_cvar('bags', dump_json(bag))

    if starry_desc:
        desc = starry_desc + desc

    desc = weather_desc + "\n" + desc + weather_change_desc

    if not c:
        desc += "\n\n:warning: Reminder: You can fish as a group activity if you do it within combat initiative. You don't even have to add players to the initiative for this!"


return (f'embed -title "{title}" -desc "{desc}" -thumb {image} -image {weather_img} -footer "{footer}" -color #87ceeb')
</drac2>
